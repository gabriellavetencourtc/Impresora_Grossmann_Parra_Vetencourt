/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto.pkg2;

import java.time.LocalTime;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author gabriellavetencourt
 */
/**
 * Esta clase representa una interfaz gráfica para eliminar documentos de una cola de impresión.
 * Permite buscar documentos asociados a un usuario y eliminarlos de la cola.
 */
public class EliminarDocCola extends javax.swing.JFrame {

    private Lista<Documento> ldoc;
    private MonticuloB mb;
    private JTextArea textA;
    private Lista<Usuario> listaUsuarios;

    /**
     * Creates new form EliminarDocCola
     */
    /**
     * Constructor de la clase EliminarDocCola.
     *
     * @param ldoc           Lista de documentos en cola de impresión
     * @param mb             Montículo binario para la cola de impresión
     * @param textA          Área de texto donde se muestra la cola de impresión
     * @param listaUsuarios  Lista de usuarios asociados a los documentos
     */
    public EliminarDocCola(Lista<Documento> ldoc, MonticuloB mb, JTextArea textA, Lista<Usuario> listaUsuarios) {
        initComponents();
        this.ldoc = ldoc;
        this.mb = mb;
        this.textA = textA;
        this.listaUsuarios = listaUsuarios;

        this.setResizable(false);
        this.setTitle("ELIMINAR DOCUMENTO DE LA COLA DE IMPRESIÓN");
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nombreUs = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        docDisponibles = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        nombreDoc = new javax.swing.JTextField();
        Eliminar = new javax.swing.JButton();
        volver = new javax.swing.JButton();
        buscar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel1.setText("Ingrese el usuario:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 24, -1, -1));
        getContentPane().add(nombreUs, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 21, 109, -1));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel2.setText("Documentos del usuario en cola de impresion:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(124, 70, -1, -1));

        docDisponibles.setEditable(false);
        docDisponibles.setColumns(20);
        docDisponibles.setRows(5);
        docDisponibles.setFocusable(false);
        jScrollPane1.setViewportView(docDisponibles);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(162, 93, 203, 183));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel3.setText("Ingrese el nombre del documento a eliminar:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, -1, -1));
        getContentPane().add(nombreDoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 294, 95, -1));

        Eliminar.setText("Eliminar");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });
        getContentPane().add(Eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(407, 294, -1, -1));

        volver.setText("Volver");
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });
        getContentPane().add(volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(411, 335, -1, -1));

        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        getContentPane().add(buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(284, 21, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyecto/pkg2/Imagenes/Pasted Graphic 6.png"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 150, 250));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyecto/pkg2/Imagenes/Pasted Graphic 7.png"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 110, 150, 160));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyecto/pkg2/Imagenes/fondoazul.jpeg"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 530, 380));

        pack();
    }// </editor-fold>//GEN-END:initComponents

     /**
     * Método invocado al pulsar el botón "Volver", oculta la ventana actual.
     *
     * @param evt Evento de acción que desencadena el método
     */
    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_volverActionPerformed
    /**
     * Método invocado al pulsar el botón "Eliminar".
     * Elimina un documento de la cola de impresión si existe.
     *
     * @param evt Evento de acción que desencadena el método
     */
    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        // TODO add your handling code here:
        if (mb.buscarPorNombre(nombreDoc.getText())) {

            for (int i = 0; i < mb.getActualSize(); i++) {
                if (mb.getMonticulo()[i].getNombre().equalsIgnoreCase(nombreDoc.getText())) {

                    mb.getMonticulo()[i].setTiempoPorHoja(0);

                    LocalTime tiempoImpresion1 = LocalTime.ofSecondOfDay(mb.getMonticulo()[mb.padre(i)].getTiempoPorHoja());
                    LocalTime tiempoImpresion2 = LocalTime.ofSecondOfDay(mb.getMonticulo()[i].getTiempoPorHoja());

                    while (i != 0 && tiempoImpresion1.isAfter(tiempoImpresion2)) {
                        mb.intercambiar(i, mb.padre(i));
                        i = mb.padre(i);
                    }

                    mb.eliminarMin();
                }
            }
            textA.setText(mb.MostrarCola());

            JOptionPane.showMessageDialog(this, "Documento eliminado con éxito!");

        } else {
            JOptionPane.showMessageDialog(this, "El documento ingresado no existe o no está en la cola de impresión");
        }


    }//GEN-LAST:event_EliminarActionPerformed
    /**
     * Método invocado al pulsar el botón "Buscar".
     * Busca documentos asociados a un usuario y los muestra en un área de texto.
     *
     * @param evt Evento de acción que desencadena el método
     */
    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        // TODO add your handling code here:
        String print = "";
        int cont = 1;
        if (!nombreUs.getText().isEmpty()) {
            Hashtable hs = ldoc.getHs();
            if (hs.contieneUsuario(nombreUs.getText())) {

                Usuario usAux = (Usuario) ldoc.getHs().getKey(nombreUs.getText());
                Lista<Documento> ldocAux = (Lista<Documento>) ldoc.getHs().get(usAux);

                Nodo pAux = ldocAux.getpFirst();
                while (pAux != null) {
                    Documento doc = (Documento) pAux.getDato();
                    for (int i = 0; i < mb.getActualSize(); i++) {
                        if (mb.getMonticulo()[i].getNombre().equalsIgnoreCase(doc.getNombre())) {
                            print += "DOCUMENTO " + cont + "\n";
                            print += "Nombre: " + doc.getNombre() + "\n";
                            print += "Tamaño: " + doc.getTamaño() + "\n";
                            print += "Tipo: " + doc.getTipo() + "\n\n";
                        }
                    }
                    pAux = pAux.getpNext();
                    cont++;

                }

                docDisponibles.setText(print);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error! El usuario ingresado no existe o no tiene documentos en la cola de impresión");
        }
    }//GEN-LAST:event_buscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EliminarDocCola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EliminarDocCola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EliminarDocCola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EliminarDocCola.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Eliminar;
    private javax.swing.JButton buscar;
    private javax.swing.JTextArea docDisponibles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreDoc;
    private javax.swing.JTextField nombreUs;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables
}
