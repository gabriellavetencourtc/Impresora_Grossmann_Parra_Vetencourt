/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto.pkg2;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author gabriellavetencourt
 */
/**
 * La clase Imprimir representa la interfaz de usuario para imprimir documentos,
 * permite a los usuarios seleccionar documentos para imprimir y definir si son prioritarios o no.
 */
public class Imprimir extends javax.swing.JFrame {

    private Lista<Documento> ldoc;
    private MonticuloB mb;
    private JTextArea textA;
    private JTextArea textA2;

    /**
     * Creates new form Imprimir
     */
      /**
     * Constructor de la clase Imprimir.
     * 
     * @param ldoc Lista de documentos disponibles.
     * @param mb Montículo binario que representa la cola de impresión.
     * @param texta JTextArea utilizada para mostrar información.
     */
    public Imprimir(Lista<Documento> ldoc, MonticuloB mb, JTextArea texta) {
        initComponents();
        this.ldoc = ldoc;
        this.mb = mb;
        this.textA = texta;

        this.setResizable(false);
        this.setTitle("IMPRIMIR");
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nombreUsuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TAImprimir = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        nombreDoc = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pSi = new javax.swing.JButton();
        pNo = new javax.swing.JButton();
        volver = new javax.swing.JButton();
        buscarUs = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel1.setText("Ingrese su usuario:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 36, -1, -1));

        nombreUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreUsuarioActionPerformed(evt);
            }
        });
        getContentPane().add(nombreUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 33, 108, -1));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel2.setText("Documentos Disponibles:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 74, -1, -1));

        TAImprimir.setEditable(false);
        TAImprimir.setColumns(20);
        TAImprimir.setRows(5);
        TAImprimir.setFocusable(false);
        jScrollPane1.setViewportView(TAImprimir);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 103, -1, 208));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel3.setText("Ingrese el nombre del documento a imprimir: ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 320, -1, -1));
        getContentPane().add(nombreDoc, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 320, 118, -1));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel4.setText("¿Es prioritario?");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(67, 358, -1, -1));

        pSi.setText("Si");
        pSi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pSiActionPerformed(evt);
            }
        });
        getContentPane().add(pSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 393, -1, -1));

        pNo.setText("No");
        pNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pNoActionPerformed(evt);
            }
        });
        getContentPane().add(pNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 393, -1, -1));

        volver.setText("volver");
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });
        getContentPane().add(volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(342, 442, -1, -1));

        buscarUs.setText("Buscar");
        buscarUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarUsActionPerformed(evt);
            }
        });
        getContentPane().add(buscarUs, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 33, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyecto/pkg2/Imagenes/Pasted Graphic 8.png"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, 190, 210));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyecto/pkg2/Imagenes/fondoazul.jpeg"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 490, 490));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nombreUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreUsuarioActionPerformed

    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_volverActionPerformed

    /**
     * Acción realizada cuando se presiona el botón "Buscar".
     * Busca los documentos disponibles para el usuario ingresado.
     * 
     * @param evt Evento de acción.
     */
    private void buscarUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarUsActionPerformed
        // TODO add your handling code here:
        if (!nombreUsuario.getText().isEmpty()) {
            Hashtable hs = ldoc.getHs();

            if (hs.contieneUsuario(nombreUsuario.getText())) {
                
                TAImprimir.setText(ldoc.ImprimirPorUsuario(nombreUsuario.getText()));
            } else {
                JOptionPane.showMessageDialog(this, "El usuario ingresado no existe o no tiene documentos disponibles");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error! Ingrese un usuario existente");
        }

    }//GEN-LAST:event_buscarUsActionPerformed

     /**
     * Acción realizada cuando se presiona el botón "Sí" para imprimir un documento prioritario.
     * Actualiza la cola de impresión y la muestra en la JTextArea correspondiente.
     * 
     * @param evt Evento de acción.
     */
    private void pSiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pSiActionPerformed

        if (TAImprimir.getText().contains(nombreDoc.getText())) {

            Usuario usAux = (Usuario) ldoc.getHs().getKey(nombreUsuario.getText());

            Lista<Documento> ldocAux = (Lista<Documento>) ldoc.getHs().get(usAux);
            Nodo pAux = ldocAux.getpFirst();
            while (pAux != null) {

                Documento doc = (Documento) pAux.getDato();
                if (doc.getNombre().equalsIgnoreCase(nombreDoc.getText())) {
                    int tiempoInicial = doc.getTiempoPorHoja();
                    
                    if(tiempoInicial <=5){
                        tiempoInicial = 6;
                    }
                    
                    if (usAux.getTipo().equalsIgnoreCase("prioridad_alta")) {

                        doc.setTiempoPorHoja(tiempoInicial - 5);

                    } else if (usAux.getTipo().equalsIgnoreCase("prioridad_media")) {

                        doc.setTiempoPorHoja(tiempoInicial - 3);

                    } else if (usAux.getTipo().equalsIgnoreCase("prioridad_baja")) {

                        doc.setTiempoPorHoja(tiempoInicial);
                    }

                    JOptionPane.showMessageDialog(this, nombreDoc.getText() + " ha sido enviado a la cola de impresion!");
                    mb.insertar(doc);
                    break;

                }
                pAux = pAux.getpNext();
            }
            
            textA.setText(mb.MostrarCola());

        } else {
            JOptionPane.showMessageDialog(this, "El documento ingresado no existe. Por favor ingrese uno de los documentos mostrados en pantalla");
        }


    }//GEN-LAST:event_pSiActionPerformed

    /**
     * Acción realizada cuando se presiona el botón "No" para imprimir un documento no prioritario.
     * Actualiza la cola de impresión y la muestra en la JTextArea correspondiente.
     * 
     * @param evt Evento de acción.
     */
    private void pNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pNoActionPerformed
        // TODO add your handling code here:

        if (TAImprimir.getText().contains(nombreDoc.getText())) {

            Usuario usAux = (Usuario) ldoc.getHs().getKey(nombreUsuario.getText());

            Lista<Documento> ldocAux = (Lista<Documento>) ldoc.getHs().get(usAux);
            Nodo pAux = ldocAux.getpFirst();

            while (pAux != null) {

                Documento doc = (Documento) pAux.getDato();
                if (doc.getNombre().equalsIgnoreCase(nombreDoc.getText())) {

                    JOptionPane.showMessageDialog(this, nombreDoc.getText() + " ha sido enviado a la cola de impresion!");
                    mb.insertar(doc);
                    break;

                }
                pAux = pAux.getpNext();
            }

            textA.setText(mb.MostrarCola());

        } else {
            JOptionPane.showMessageDialog(this, "El documento ingresado no existe. Por favor ingrese uno de los documentos mostrados en pantalla");
        }
    }//GEN-LAST:event_pNoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea TAImprimir;
    private javax.swing.JButton buscarUs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreDoc;
    private javax.swing.JTextField nombreUsuario;
    private javax.swing.JButton pNo;
    private javax.swing.JButton pSi;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables
}
